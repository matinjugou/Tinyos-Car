/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DebugMsg'
 * message type.
 */

public class DebugMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 8;

    /** Create a new DebugMsg of size 12. */
    public DebugMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DebugMsg of the given data_length. */
    public DebugMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg with the given data_length
     * and base offset.
     */
    public DebugMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg using the given byte array
     * as backing store.
     */
    public DebugMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DebugMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DebugMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg embedded in the given message
     * at the given base offset.
     */
    public DebugMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DebugMsg embedded in the given message
     * at the given base offset and length.
     */
    public DebugMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DebugMsg> \n";
      try {
        s += "  [pinA=0x"+Long.toHexString(get_pinA())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pinB=0x"+Long.toHexString(get_pinB())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pinC=0x"+Long.toHexString(get_pinC())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pinD=0x"+Long.toHexString(get_pinD())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pinE=0x"+Long.toHexString(get_pinE())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pinF=0x"+Long.toHexString(get_pinF())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinA
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinA' is signed (false).
     */
    public static boolean isSigned_pinA() {
        return false;
    }

    /**
     * Return whether the field 'pinA' is an array (false).
     */
    public static boolean isArray_pinA() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinA'
     */
    public static int offset_pinA() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinA'
     */
    public static int offsetBits_pinA() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'pinA'
     */
    public int get_pinA() {
        return (int)getUIntBEElement(offsetBits_pinA(), 16);
    }

    /**
     * Set the value of the field 'pinA'
     */
    public void set_pinA(int value) {
        setUIntBEElement(offsetBits_pinA(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinA'
     */
    public static int size_pinA() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinA'
     */
    public static int sizeBits_pinA() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinB
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinB' is signed (false).
     */
    public static boolean isSigned_pinB() {
        return false;
    }

    /**
     * Return whether the field 'pinB' is an array (false).
     */
    public static boolean isArray_pinB() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinB'
     */
    public static int offset_pinB() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinB'
     */
    public static int offsetBits_pinB() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'pinB'
     */
    public int get_pinB() {
        return (int)getUIntBEElement(offsetBits_pinB(), 16);
    }

    /**
     * Set the value of the field 'pinB'
     */
    public void set_pinB(int value) {
        setUIntBEElement(offsetBits_pinB(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinB'
     */
    public static int size_pinB() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinB'
     */
    public static int sizeBits_pinB() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinC
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinC' is signed (false).
     */
    public static boolean isSigned_pinC() {
        return false;
    }

    /**
     * Return whether the field 'pinC' is an array (false).
     */
    public static boolean isArray_pinC() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinC'
     */
    public static int offset_pinC() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinC'
     */
    public static int offsetBits_pinC() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'pinC'
     */
    public int get_pinC() {
        return (int)getUIntBEElement(offsetBits_pinC(), 16);
    }

    /**
     * Set the value of the field 'pinC'
     */
    public void set_pinC(int value) {
        setUIntBEElement(offsetBits_pinC(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinC'
     */
    public static int size_pinC() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinC'
     */
    public static int sizeBits_pinC() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinD
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinD' is signed (false).
     */
    public static boolean isSigned_pinD() {
        return false;
    }

    /**
     * Return whether the field 'pinD' is an array (false).
     */
    public static boolean isArray_pinD() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinD'
     */
    public static int offset_pinD() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinD'
     */
    public static int offsetBits_pinD() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'pinD'
     */
    public int get_pinD() {
        return (int)getUIntBEElement(offsetBits_pinD(), 16);
    }

    /**
     * Set the value of the field 'pinD'
     */
    public void set_pinD(int value) {
        setUIntBEElement(offsetBits_pinD(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinD'
     */
    public static int size_pinD() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinD'
     */
    public static int sizeBits_pinD() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinE
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinE' is signed (false).
     */
    public static boolean isSigned_pinE() {
        return false;
    }

    /**
     * Return whether the field 'pinE' is an array (false).
     */
    public static boolean isArray_pinE() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinE'
     */
    public static int offset_pinE() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinE'
     */
    public static int offsetBits_pinE() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'pinE'
     */
    public int get_pinE() {
        return (int)getUIntBEElement(offsetBits_pinE(), 16);
    }

    /**
     * Set the value of the field 'pinE'
     */
    public void set_pinE(int value) {
        setUIntBEElement(offsetBits_pinE(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinE'
     */
    public static int size_pinE() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinE'
     */
    public static int sizeBits_pinE() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinF
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinF' is signed (false).
     */
    public static boolean isSigned_pinF() {
        return false;
    }

    /**
     * Return whether the field 'pinF' is an array (false).
     */
    public static boolean isArray_pinF() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinF'
     */
    public static int offset_pinF() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinF'
     */
    public static int offsetBits_pinF() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'pinF'
     */
    public int get_pinF() {
        return (int)getUIntBEElement(offsetBits_pinF(), 16);
    }

    /**
     * Set the value of the field 'pinF'
     */
    public void set_pinF(int value) {
        setUIntBEElement(offsetBits_pinF(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinF'
     */
    public static int size_pinF() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinF'
     */
    public static int sizeBits_pinF() {
        return 16;
    }

}
